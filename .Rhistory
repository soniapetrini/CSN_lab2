library(ggplot2)
require("stats4") # for MLE
require("VGAM")
#degree_sequence = read.table("./data/English_degree_sequence.txt",
#                  header = FALSE)
#nrow(degree_sequence)   # number of nodes
#sum(degree_sequence)    # sum of total degrees
#sum(degree_sequence)/dim(degree_sequence)[1]    # mean degree
#spectrum <- table(degree_sequence)
#barplot(spectrum, main = "English",
#        xlab = "degree", ylab = "number of vertices")
#barplot(spectrum, main = "English",
#        xlab = "degree", ylab = "number of vertices", log = "xy")
#source("summary_table.R")
write_summary <- function(language,file) {
degree_sequence = read.table(file, header = FALSE)
return(c(language,
length(degree_sequence$V1),
max(degree_sequence$V1),
sum(degree_sequence$V1)/length(degree_sequence$V1),
length(degree_sequence$V1)/sum(degree_sequence$V1)))
}
source = read.table("list_in.txt", header = TRUE,
as.is = c("language","file"))
degree_distrib_ls = c()
for (x in 1:nrow(source)) {
degree_distrib_ls[x] = read.table(source$file[x])
}
get_mle_params <- function(x) {
# global variables
M <- sum(x)
N <- length(x)
M_1 <- sum(log(x))
H <- function(kmax,gamma) {
s <- 0
for (i in 1:kmax) {
s <- s + (1/(x[i]^gamma))
}
return(s)
}
## Poisson
minus_log_like_poisson <- function(lambda) {
C <- 0;
for(i in 1:N) {
for(j in 2:x[i]) {
C<-C+log(j)
}
}
return(- M * log(lambda) + N*(lambda + log(1-(exp(-lambda)))) + C)
}
## Geometric
minus_log_like_geom <- function(q) {
- (M-N)*log(1-q) - N*log(q)
}
## zeta
minus_log_like_zeta <- function(gamma) {
N * log(zeta(gamma)) + gamma * M_1
}
## Trunc Zeta
minus_log_like_trunc_zeta <- function(kmax,gamma) {
gamma*M_1 + N*log(H(kmax,gamma))
}
# ml estimation
mle_geom <- mle(minus_log_like_geom,start = list(q = N/M),method = "L-BFGS-B",
lower = c(0.00001),upper = c(0.99999))
mle_zeta <- mle(minus_log_like_zeta,start = list(gamma = 2),method = "L-BFGS-B",
lower = c(1.0000001))
mle_poisson <- mle(minus_log_like_poisson,start = list(lambda = M/N),method = "L-BFGS-B",
lower = c(0.0000001))
mle_trunc_zeta <- mle(minus_log_like_trunc_zeta,start = list(gamma = 2,kmax=max(x)),method = "L-BFGS-B",
lower = c(1.0000001,max(x)-1000),
upper=c(50,max(x)+1000))
mle_ls <- c(mle_poisson,mle_geom,mle_zeta,mle_trunc_zeta)
# collect the best par for each distribution
best_pars <- c()
i <- 1
for (n in mle_ls) {
best_pars[i] <- attributes(summary(n))$coef[1]
i <- i + 1
}
# collect -2logLike
m2loglik_ls <- c()
i <- 1
for (n in mle_ls) {
m2loglik_ls[i] <- m2logL <- attributes(summary(n))$m2logL
i <- i + 1
}
return(list(best_pars,m2loglik_ls))
}
params_table <- data.frame()
for (n in 1:length(degree_distrib_ls)) {
x <- unlist(degree_distrib_ls[[n]])
new_pars <- get_mle_params(x)
params_table <- rbind(params_table,new_pars[[1]])
}
get_mle_params <- function(x) {
# global variables
M <- sum(x)
N <- length(x)
M_1 <- sum(log(x))
H <- function(kmax,gamma) {
s <- 0
for (i in 1:kmax) {
s <- s + (1/(x[i]^gamma))
}
return(s)
}
## Poisson
minus_log_like_poisson <- function(lambda) {
C <- 0;
for(i in 1:N) {
for(j in 2:x[i]) {
C<-C+log(j)
}
}
return(- M * log(lambda) + N*(lambda + log(1-(exp(-lambda)))) + C)
}
## Geometric
minus_log_like_geom <- function(q) {
- (M-N)*log(1-q) - N*log(q)
}
## zeta
minus_log_like_zeta <- function(gamma) {
N * log(zeta(gamma)) + gamma * M_1
}
## Trunc Zeta
minus_log_like_trunc_zeta <- function(kmax,gamma) {
gamma*M_1 + N*log(H(kmax,gamma))
}
# ml estimation
mle_geom <- mle(minus_log_like_geom,start = list(q = N/M),method = "L-BFGS-B",
lower = c(0.00001),upper = c(0.99999))
mle_zeta <- mle(minus_log_like_zeta,start = list(gamma = 2),method = "L-BFGS-B",
lower = c(1.0000001))
mle_poisson <- mle(minus_log_like_poisson,start = list(lambda = M/N),method = "L-BFGS-B",
lower = c(0.0000001))
mle_trunc_zeta <- mle(minus_log_like_trunc_zeta,start = list(gamma = 2,kmax=max(x)),method = "L-BFGS-B",
lower = c(1.0000001,max(x)-1000),
upper=c(50,max(x)))
mle_ls <- c(mle_poisson,mle_geom,mle_zeta,mle_trunc_zeta)
# collect the best par for each distribution
best_pars <- c()
i <- 1
for (n in mle_ls) {
best_pars[i] <- attributes(summary(n))$coef[1]
i <- i + 1
}
# collect -2logLike
m2loglik_ls <- c()
i <- 1
for (n in mle_ls) {
m2loglik_ls[i] <- m2logL <- attributes(summary(n))$m2logL
i <- i + 1
}
return(list(best_pars,m2loglik_ls))
}
params_table <- data.frame()
for (n in 1:length(degree_distrib_ls)) {
x <- unlist(degree_distrib_ls[[n]])
new_pars <- get_mle_params(x)
params_table <- rbind(params_table,new_pars[[1]])
}
mle_trunc_zeta <- mle(minus_log_like_trunc_zeta,start = list(gamma = 2,kmax=max(x)),method = "L-BFGS-B",
lower = c(1.0000001,max(x)-10),
upper=c(50,max(x)))
get_mle_params <- function(x) {
# global variables
M <- sum(x)
N <- length(x)
M_1 <- sum(log(x))
H <- function(kmax,gamma) {
s <- 0
for (i in 1:kmax) {
s <- s + (1/(x[i]^gamma))
}
return(s)
}
## Poisson
minus_log_like_poisson <- function(lambda) {
C <- 0;
for(i in 1:N) {
for(j in 2:x[i]) {
C<-C+log(j)
}
}
return(- M * log(lambda) + N*(lambda + log(1-(exp(-lambda)))) + C)
}
## Geometric
minus_log_like_geom <- function(q) {
- (M-N)*log(1-q) - N*log(q)
}
## zeta
minus_log_like_zeta <- function(gamma) {
N * log(zeta(gamma)) + gamma * M_1
}
## Trunc Zeta
minus_log_like_trunc_zeta <- function(kmax,gamma) {
gamma*M_1 + N*log(H(kmax,gamma))
}
# ml estimation
mle_geom <- mle(minus_log_like_geom,start = list(q = N/M),method = "L-BFGS-B",
lower = c(0.00001),upper = c(0.99999))
mle_zeta <- mle(minus_log_like_zeta,start = list(gamma = 2),method = "L-BFGS-B",
lower = c(1.0000001))
mle_poisson <- mle(minus_log_like_poisson,start = list(lambda = M/N),method = "L-BFGS-B",
lower = c(0.0000001))
mle_trunc_zeta <- mle(minus_log_like_trunc_zeta,start = list(gamma = 2,kmax=max(x)),method = "L-BFGS-B",
lower = c(1.0000001,max(x)-10),
upper=c(50,max(x)))
mle_ls <- c(mle_poisson,mle_geom,mle_zeta,mle_trunc_zeta)
# collect the best par for each distribution
best_pars <- c()
i <- 1
for (n in mle_ls) {
best_pars[i] <- attributes(summary(n))$coef[1]
i <- i + 1
}
# collect -2logLike
m2loglik_ls <- c()
i <- 1
for (n in mle_ls) {
m2loglik_ls[i] <- m2logL <- attributes(summary(n))$m2logL
i <- i + 1
}
return(list(best_pars,m2loglik_ls))
}
params_table <- data.frame()
for (n in 1:length(degree_distrib_ls)) {
x <- unlist(degree_distrib_ls[[n]])
new_pars <- get_mle_params(x)
params_table <- rbind(params_table,new_pars[[1]])
}
get_mle_params <- function(x) {
# global variables
M <- sum(x)
N <- length(x)
M_1 <- sum(log(x))
H <- function(kmax,gamma) {
s <- 0
for (i in 1:kmax) {
s <- s + (1/(x[i]^gamma))
}
return(s)
}
## Poisson
minus_log_like_poisson <- function(lambda) {
C <- 0;
for(i in 1:N) {
for(j in 2:x[i]) {
C<-C+log(j)
}
}
return(- M * log(lambda) + N*(lambda + log(1-(exp(-lambda)))) + C)
}
## Geometric
minus_log_like_geom <- function(q) {
- (M-N)*log(1-q) - N*log(q)
}
## zeta
minus_log_like_zeta <- function(gamma) {
N * log(zeta(gamma)) + gamma * M_1
}
## Trunc Zeta
minus_log_like_trunc_zeta <- function(kmax,gamma) {
gamma*M_1 + N*log(H(kmax,gamma))
}
# ml estimation
mle_geom <- mle(minus_log_like_geom,start = list(q = N/M),method = "L-BFGS-B",
lower = c(0.00001),upper = c(0.99999))
mle_zeta <- mle(minus_log_like_zeta,start = list(gamma = 2),method = "L-BFGS-B",
lower = c(1.0000001))
mle_poisson <- mle(minus_log_like_poisson,start = list(lambda = M/N),method = "L-BFGS-B",
lower = c(0.0000001))
mle_trunc_zeta <- mle(minus_log_like_trunc_zeta,start = list(gamma = 2,kmax=N),method = "L-BFGS-B",
lower = c(1.0000001,N-10),
upper=c(50,N))
mle_ls <- c(mle_poisson,mle_geom,mle_zeta,mle_trunc_zeta)
# collect the best par for each distribution
best_pars <- c()
i <- 1
for (n in mle_ls) {
best_pars[i] <- attributes(summary(n))$coef[1]
i <- i + 1
}
# collect -2logLike
m2loglik_ls <- c()
i <- 1
for (n in mle_ls) {
m2loglik_ls[i] <- m2logL <- attributes(summary(n))$m2logL
i <- i + 1
}
return(list(best_pars,m2loglik_ls))
}
params_table <- data.frame()
for (n in 1:length(degree_distrib_ls)) {
x <- unlist(degree_distrib_ls[[n]])
new_pars <- get_mle_params(x)
params_table <- rbind(params_table,new_pars[[1]])
}
get_mle_params <- function(x) {
# global variables
M <- sum(x)
N <- length(x)
M_1 <- sum(log(x))
H <- function(kmax,gamma) {
s <- 0
for (i in 1:kmax) {
s <- s + (1/(x[i]^gamma))
}
return(s)
}
## Poisson
minus_log_like_poisson <- function(lambda) {
C <- 0;
for(i in 1:N) {
for(j in 2:x[i]) {
C<-C+log(j)
}
}
return(- M * log(lambda) + N*(lambda + log(1-(exp(-lambda)))) + C)
}
## Geometric
minus_log_like_geom <- function(q) {
- (M-N)*log(1-q) - N*log(q)
}
## zeta
minus_log_like_zeta <- function(gamma) {
N * log(zeta(gamma)) + gamma * M_1
}
## Trunc Zeta
minus_log_like_trunc_zeta <- function(kmax,gamma) {
gamma*M_1 + N*log(H(kmax,gamma))
}
# ml estimation
mle_geom <- mle(minus_log_like_geom,start = list(q = N/M),method = "L-BFGS-B",
lower = c(0.00001),upper = c(0.99999))
mle_zeta <- mle(minus_log_like_zeta,start = list(gamma = 2),method = "L-BFGS-B",
lower = c(1.0000001))
mle_poisson <- mle(minus_log_like_poisson,start = list(lambda = M/N),method = "L-BFGS-B",
lower = c(0.0000001))
mle_trunc_zeta <- mle(minus_log_like_trunc_zeta,start = list(gamma = 2,kmax=N),method = "L-BFGS-B")
#lower = c(1.0000001,N-10),
#upper=c(50,N))
mle_ls <- c(mle_poisson,mle_geom,mle_zeta,mle_trunc_zeta)
# collect the best par for each distribution
best_pars <- c()
i <- 1
for (n in mle_ls) {
best_pars[i] <- attributes(summary(n))$coef[1]
i <- i + 1
}
# collect -2logLike
m2loglik_ls <- c()
i <- 1
for (n in mle_ls) {
m2loglik_ls[i] <- m2logL <- attributes(summary(n))$m2logL
i <- i + 1
}
return(list(best_pars,m2loglik_ls))
}
params_table <- data.frame()
for (n in 1:length(degree_distrib_ls)) {
x <- unlist(degree_distrib_ls[[n]])
new_pars <- get_mle_params(x)
params_table <- rbind(params_table,new_pars[[1]])
}
x <- unlist(degree_distrib_ls[[1]])
new_pars <- get_mle_params(x)
x <- unlist(degree_distrib_ls[[2]])
new_pars <- get_mle_params(x)
x <- unlist(degree_distrib_ls[[3]])
new_pars <- get_mle_params(x)
x <- unlist(degree_distrib_ls[[4]])
new_pars <- get_mle_params(x)
params_table <- data.frame()
for (n in 1:length(degree_distrib_ls)) {
x <- unlist(degree_distrib_ls[[n]])
new_pars <- get_mle_params(x)
print(new_pars)
params_table <- rbind(params_table,new_pars[[1]])
}
params_table <- data.frame()
for (n in 1:length(degree_distrib_ls)) {
x <- unlist(degree_distrib_ls[[n]])
#new_pars <- get_mle_params(x)
print(get_mle_params(x))
params_table <- rbind(params_table,new_pars[[1]])
}
x <- unlist(degree_distrib_ls[[5]])
new_pars <- get_mle_params(x)
x <- unlist(degree_distrib_ls[[6]])
new_pars <- get_mle_params(x)
x <- unlist(degree_distrib_ls[[7]])
new_pars <- get_mle_params(x)
x <- unlist(degree_distrib_ls[[8]])
new_pars <- get_mle_params(x)
x <- unlist(degree_distrib_ls[[9]])
new_pars <- get_mle_params(x)
x <- unlist(degree_distrib_ls[[10]])
new_pars <- get_mle_params(x)
